REM   Script: SQL Library Database Management System - Tables - Views - Queries script
REM   Final version

REM   Script: DBS SQL LIBRARY SCRIPT


REM   SAVING SCRIPT FOR DBS CW


CREATE TABLE LMEMBER (    
IDNUM NUMBER(6) NOT NULL PRIMARY KEY,    
IS_RESTRICTED VARCHAR2(3)--CHECK   
);

CREATE TABLE STUDENT(    
FNAME VARCHAR2(10),     
LNAME VARCHAR2(10),    
ID_NUM NUMBER(6) REFERENCES LMEMBER(IDNUM),    
LAMOUNT NUMBER(1),   
CONSTRAINT LAMOUNTCHK CHECK (LAMOUNT BETWEEN 0 AND 5),   
LDURATION NUMBER(2)   
);

CREATE TABLE STAFF(    
FNAME VARCHAR2(10),     
LNAME VARCHAR2(10),    
ID_NUM NUMBER(6) REFERENCES LMEMBER(IDNUM),    
LAMOUNT NUMBER(2),   
CONSTRAINT LAMOUNTCHK_STAFF CHECK (LAMOUNT BETWEEN 0 AND 10),   
LDURATION NUMBER(2)   
);

CREATE TABLE S_SUBJECT( 
SUBJECT_CLASS VARCHAR2(15) NOT NULL PRIMARY KEY, 
FLOOR_NUM NUMBER(1) UNIQUE, 
CONSTRAINT FLOOR_NUMCHK CHECK (FLOOR_NUM BETWEEN 1 AND 3) 
);

CREATE TABLE L_RESOURCES( 
ITEM_ID NUMBER(7) NOT NULL PRIMARY KEY,  
ITEM_RESTRICITED VARCHAR2(3), 
CONSTRAINT ITEM_RESTRICITEDCHK CHECK (ITEM_RESTRICITED IN ('YES','NO')), 
ITEM_AVAILABILE VARCHAR2(15), 
CONSTRAINT ITEM_AVAILABILITYCHK CHECK (ITEM_AVAILABILE IN ('YES','NO')) 
);

CREATE TABLE BOOKS( 
ITEM_NAME VARCHAR2(50),  
ITEMID NUMBER(7) REFERENCES L_RESOURCES(ITEM_ID), 
COPIES NUMBER(2), 
I_CLASS VARCHAR2(15) REFERENCES S_SUBJECT(SUBJECT_CLASS), 
SHELF_NUM NUMBER(2) NOT NULL, 
CONSTRAINT SHELF_NUMCHK CHECK(SHELF_NUM BETWEEN 1 AND 10), 
FLOOR_NUM NUMBER(1) REFERENCES S_SUBJECT(FLOOR_NUM) 
);

CREATE TABLE DVDS( 
ITEM_NAME VARCHAR2(50),  
ITEMID NUMBER(7) REFERENCES L_RESOURCES(ITEM_ID), 
COPIES NUMBER(2), 
I_CLASS VARCHAR2(15) REFERENCES S_SUBJECT(SUBJECT_CLASS), 
SHELF_NUM NUMBER(2) NOT NULL, 
CONSTRAINT SHELF_NUMCHK_DVD CHECK(SHELF_NUM BETWEEN 1 AND 10), 
FLOOR_NUM NUMBER(1) REFERENCES S_SUBJECT(FLOOR_NUM) 
);

CREATE TABLE VIDEOS( 
ITEM_NAME VARCHAR2(50),  
ITEMID NUMBER(7) REFERENCES L_RESOURCES(ITEM_ID), 
COPIES NUMBER(2), 
I_CLASS VARCHAR2(15) REFERENCES S_SUBJECT(SUBJECT_CLASS), 
SHELF_NUM NUMBER(2) NOT NULL, 
CONSTRAINT SHELF_NUMCHK_VIDEOS CHECK(SHELF_NUM BETWEEN 1 AND 10), 
FLOOR_NUM NUMBER(1) REFERENCES S_SUBJECT(FLOOR_NUM) 
);

CREATE TABLE LOAN( 
M_ID NUMBER(6) REFERENCES LMEMBER(IDNUM), 
INITIATE_FINE VARCHAR2(3), 
CONSTRAINT FINE_CHECK CHECK (INITIATE_FINE IN ('YES','NO')) 
);

CREATE OR REPLACE TRIGGER set_res_STU  
AFTER INSERT OR UPDATE ON STUDENT  
FOR EACH ROW   
BEGIN  
    IF :new.lamount = 5 THEN  
        UPDATE LMEMBER   
        SET IS_RESTRICTED = 'YES'  
        WHERE IDNUM = :new.id_num;  
    END IF;            
END;
/

CREATE OR REPLACE TRIGGER SET_RES_STAFF  
AFTER INSERT OR UPDATE ON STAFF  
FOR EACH ROW   
BEGIN  
    IF :new.LAMOUNT = 10 THEN  
        UPDATE LMEMBER   
        SET IS_RESTRICTED = 'YES'  
        WHERE IDNUM = :new.ID_NUM;  
    END IF;            
END;
/

CREATE OR REPLACE TRIGGER SET_BOOK_AVAILABLE  
AFTER INSERT OR UPDATE ON BOOKS  
FOR EACH ROW   
BEGIN  
    IF :new.COPIES = 00 THEN  
        UPDATE L_RESOURCES   
        SET ITEM_AVAILABILE = 'NO'  
        WHERE ITEM_ID = :new.ITEMID;  
    END IF;            
END;
/

CREATE OR REPLACE TRIGGER SET_DVD_AVAILABLE  
AFTER INSERT OR UPDATE ON DVDS  
FOR EACH ROW   
BEGIN  
    IF :new.COPIES = 00 THEN  
        UPDATE L_RESOURCES   
        SET ITEM_AVAILABILE = 'NO'  
        WHERE ITEM_ID = :new.ITEMID;  
    END IF;            
END;
/

CREATE OR REPLACE TRIGGER STUDENT_FINE 
AFTER INSERT OR UPDATE ON STUDENT  
FOR EACH ROW   
BEGIN  
    IF :new.LDURATION > 14 THEN  
        UPDATE LOAN   
        SET INITIATE_FINE = 'YES' 
        WHERE M_ID = :new.ID_NUM;  
    END IF;            
END;
/

CREATE OR REPLACE TRIGGER STAFF_FINE 
AFTER INSERT OR UPDATE ON STAFF  
FOR EACH ROW   
BEGIN  
    IF :new.LDURATION > 14 THEN  
        UPDATE LOAN   
        SET INITIATE_FINE = 'YES' 
        WHERE M_ID = :new.ID_NUM;  
    END IF;            
END;
/

CREATE OR REPLACE TRIGGER STAFF_FINE 
AFTER INSERT OR UPDATE ON STAFF  
FOR EACH ROW   
BEGIN  
    IF :new.LDURATION > 14 THEN  
        UPDATE LOAN   
        SET INITIATE_FINE = 'YES' 
        WHERE M_ID = :new.ID_NUM;  
    END IF;            
END;
/

INSERT INTO LMEMBER VALUES('101301','NO');

INSERT INTO LMEMBER VALUES('101303','NO');

INSERT INTO LMEMBER VALUES('101304','NO');

INSERT INTO LMEMBER VALUES('101302','NO');

INSERT INTO LMEMBER VALUES('100901','NO');

INSERT INTO LMEMBER VALUES('100912','NO');

INSERT INTO LMEMBER VALUES('100909','NO');

INSERT INTO LMEMBER VALUES('100911','NO');

INSERT INTO LMEMBER VALUES('100910','NO');

INSERT INTO LMEMBER VALUES('100907','NO');

INSERT INTO LMEMBER VALUES('100908','NO');

INSERT INTO LMEMBER VALUES('100903','NO');

INSERT INTO LMEMBER VALUES('100902','NO');

INSERT INTO LMEMBER VALUES('100904','NO');

INSERT INTO LMEMBER VALUES('100905','NO');

INSERT INTO LMEMBER VALUES('100906','NO');

INSERT INTO LOAN VALUES('101301','NO');

INSERT INTO LOAN VALUES('101303','NO');

INSERT INTO LOAN VALUES('101304','NO');

INSERT INTO LOAN VALUES('101302','NO');

INSERT INTO LOAN VALUES('100901','NO');

INSERT INTO LOAN VALUES('100912','NO');

INSERT INTO LOAN VALUES('100909','NO');

INSERT INTO LOAN VALUES('100911','NO');

INSERT INTO LOAN VALUES('100910','NO');

INSERT INTO LOAN VALUES('100907','NO');

INSERT INTO LOAN VALUES('100908','NO');

INSERT INTO LOAN VALUES('100903','NO');

INSERT INTO LOAN VALUES('100902','NO');

INSERT INTO LOAN VALUES('100904','NO');

INSERT INTO LOAN VALUES('100905','NO');

INSERT INTO LOAN VALUES('100906','NO');

INSERT INTO STAFF VALUES( 
'EMMA','BISHOP','101301','10','19' 
);

INSERT INTO STAFF VALUES( 
'ZDENEK','JONES','101303','1','04' 
);

INSERT INTO STAFF VALUES( 
'AMANDA','YOUSEF','101304','10','08' 
);

INSERT INTO STAFF VALUES( 
'SAMUEL','BAKER','101302','7','02' 
);

INSERT INTO STUDENT VALUES( 
'ANTHONY','ANDERSON','100901','5','02' 
);

INSERT INTO STUDENT VALUES( 
'LUNA','CAMPBEL','100912','1','09' 
);

INSERT INTO STUDENT VALUES( 
'OLIVER','DAVIDSON','100909','2','02' 
);

INSERT INTO STUDENT VALUES( 
'SOPHIA','DAWSON','100911','4','04' 
);

INSERT INTO STUDENT VALUES( 
'SOPHIA','FLEMING','100905','2','06' 
);

INSERT INTO STUDENT VALUES( 
'SEBASTIAN','GRAY','100910','5','11' 
);

INSERT INTO STUDENT VALUES( 
'GABRIAEL','HAMILTON','100907','0','0' 
);

INSERT INTO STUDENT VALUES( 
'OBADIAH','JACKSON','100906','1','18' 
);

INSERT INTO STUDENT VALUES( 
'QUINT','MARSHAL','100908','2','03' 
);

INSERT INTO STUDENT VALUES( 
'RADLEY','MILLER','100903','0','0' 
);

INSERT INTO STUDENT VALUES( 
'XIAN','LEE','100902','3','09' 
);

INSERT INTO STUDENT VALUES( 
'SCARLETT','WHITE','100904','1','15' 
);

SELECT * FROM LOAN;

SELECT * FROM LMEMBER;

SELECT * FROM STUDENT;

INSERT INTO S_SUBJECT VALUES( 
'COMPUTING','2' 
);

INSERT INTO S_SUBJECT VALUES( 
'PHYSICS','1' 
);

INSERT INTO S_SUBJECT VALUES( 
'BUSINESS','3' 
);

INSERT INTO L_RESOURCES VALUES( 
'1003123','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'1007093','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'1003003','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'1005447','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'1003976','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'1003400','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'1009654','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'1004632','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'1006783','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'1002232','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'2003123','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'2003003','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'2005447','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'2003976','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'2003400','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'2009654','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'2004632','NO','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'3403123','YES','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'3603003','YES','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'3505447','YES','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'3303976','YES','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'3203400','YES','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'3709654','YES','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'3904632','YES','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'3803123','YES','YES' 
);

INSERT INTO L_RESOURCES VALUES( 
'3893123','YES','YES' 
);

INSERT INTO BOOKS VALUES( 
'The Feynman Lectures on Physics', '1003123','20','PHYSICS','02','1' 
);

INSERT INTO BOOKS VALUES( 
'Code Complete', '1003003','14','COMPUTING','01','2' 
);

INSERT INTO BOOKS VALUES( 
'Rich Dad Poor Dad', '1005447','15','BUSINESS','03','3' 
);

INSERT INTO BOOKS VALUES( 
'The Self-Taught Programmer', '1003976','21','COMPUTING','01','2' 
);

INSERT INTO BOOKS VALUES( 
'Shoe Dog', '1003400','03','BUSINESS','03','3' 
);

INSERT INTO BOOKS VALUES( 
'A Brief History of Time', '1009654','00','PHYSICS','02','1' 
);

INSERT INTO BOOKS VALUES( 
'The Pragmatic Programmer', '1004632','25','COMPUTING','01','2' 
);

INSERT INTO BOOKS VALUES( 
'Physics of the Impossible', '1006783','05','PHYSICS','01','1' 
);

INSERT INTO BOOKS VALUES( 
'Deep Work', '1007093','30','BUSINESS','02','3' 
);

INSERT INTO BOOKS VALUES( 
'Start with Why', '1002232','10','BUSINESS','03','3' 
);

INSERT INTO DVDS VALUES( 
'The Ultimate Physics Tutor', '2003123','08','PHYSICS','06','1' 
);

INSERT INTO DVDS VALUES( 
'Computational Thinking for Problem Solving', '2003003','14','COMPUTING','04','2' 
);

INSERT INTO DVDS VALUES( 
'Conceptual Physics Alive', '2005447','05','PHYSICS','05','1' 
);

INSERT INTO DVDS VALUES( 
'Physics 101', '2003976','12','PHYSICS','05','1' 
);

INSERT INTO DVDS VALUES( 
'Essential Business Skills', '2003400','03','BUSINESS','06','3' 
);

INSERT INTO DVDS VALUES( 
'AS Revision Business Studies', '2009654','00','BUSINESS','04','3' 
);

INSERT INTO DVDS VALUES( 
'Principles of Computing', '2004632','15','COMPUTING','05','2' 
);

INSERT INTO VIDEOS VALUES( 
'Sound Waves on Fire', '3893123','01','PHYSICS','08','1' 
);

INSERT INTO VIDEOS VALUES( 
'Musical Tesla Coil', '3803123','01','PHYSICS','07','1' 
);

INSERT INTO VIDEOS VALUES( 
'Helium Superfluid', '3904632','01','PHYSICS','10','1' 
);

INSERT INTO VIDEOS VALUES( 
'How Superconducting Levitation Works', '3709654','01','PHYSICS','09','1' 
);

INSERT INTO VIDEOS VALUES( 
'Physics 101', '3203400','01','PHYSICS','08','1' 
);

INSERT INTO VIDEOS VALUES( 
'The World Wide Web', '3303976','01','COMPUTING','07','2' 
);

INSERT INTO VIDEOS VALUES( 
'The Cold War and Consumerism', '3505447','00','COMPUTING','08','2' 
);

INSERT INTO VIDEOS VALUES( 
'Business 101', '3603003','01','BUSINESS','10','3' 
);

INSERT INTO VIDEOS VALUES( 
'Introduction to Business Studies ', '3403123','01','BUSINESS','09','3' 
);

SELECT * FROM BOOKS;

SELECT * FROM DVDS;

SELECT * FROM VIDEOS;

CREATE VIEW total_members AS  
SELECT * FROM STUDENT 
UNION 
SELECT * FROM STAFF;

CREATE VIEW all_resources AS 
SELECT * FROM BOOKS 
UNION 
SELECT * FROM DVDS 
UNION 
SELECT * FROM VIDEOS;

CREATE VIEW restricted_members AS 
SELECT b.IDNUM, s.FNAME,s.LAMOUNT AS CURRENT_LOAN, b.IS_RESTRICTED FROM STUDENT s, LMEMBER b 
WHERE b.IDNUM = s.ID_NUM AND b.IS_RESTRICTED = 'YES' 
UNION 
SELECT b.IDNUM, y.FNAME,y.LAMOUNT AS CURRENT_LOAN, b.IS_RESTRICTED FROM STAFF y, LMEMBER b 
WHERE b.IDNUM = y.ID_NUM AND b.IS_RESTRICTED = 'YES';

CREATE VIEW unavailable_items AS 
SELECT r.ITEM_ID, b.ITEM_NAME, r.ITEM_RESTRICITED, r.ITEM_AVAILABILE FROM L_RESOURCES r, BOOKS b 
WHERE r.ITEM_ID = b.ITEMID AND r.ITEM_AVAILABILE = 'NO' 
UNION 
SELECT r.ITEM_ID, v.ITEM_NAME, r.ITEM_RESTRICITED, r.ITEM_AVAILABILE FROM L_RESOURCES r, DVDS v 
WHERE r.ITEM_ID = v.ITEMID AND r.ITEM_AVAILABILE = 'NO';

CREATE VIEW restricted_items AS 
SELECT r.ITEM_ID, o.ITEM_NAME, r.ITEM_RESTRICITED, r.ITEM_AVAILABILE FROM L_RESOURCES r, VIDEOS o 
WHERE r.ITEM_ID = o.ITEMID AND r.ITEM_RESTRICITED = 'YES';

CREATE VIEW fined_members AS 
SELECT j.M_ID, s.FNAME, j.INITIATE_FINE FROM LOAN j, STUDENT s 
WHERE j.M_ID = s.ID_NUM AND j.INITIATE_FINE = 'YES' 
UNION 
SELECT j.M_ID, s.FNAME, j.INITIATE_FINE FROM LOAN j, STAFF s 
WHERE j.M_ID = s.ID_NUM AND j.INITIATE_FINE = 'YES';

SELECT * FROM total_members;

SELECT * FROM restricted_members;

SELECT * FROM all_resources;

SELECT * FROM unavailable_items;

SELECT * FROM restricted_items;

SELECT * FROM fined_members;

SELECT BOOKS.ITEM_NAME, S_SUBJECT.SUBJECT_CLASS 
FROM BOOKS 
INNER JOIN L_RESOURCES ON BOOKS.ITEMID = L_RESOURCES.ITEM_ID 
INNER JOIN S_SUBJECT ON BOOKS.I_CLASS = S_SUBJECT.SUBJECT_CLASS 
WHERE L_RESOURCES.ITEM_AVAILABILE = 'YES';

SELECT * FROM STUDENT 
INNER JOIN LMEMBER 
ON STUDENT.ID_NUM = LMEMBER.IDNUM 
WHERE LMEMBER.IS_RESTRICTED = 'YES';

SELECT I_CLASS, FLOOR_NUM 
FROM VIDEOS 
WHERE ITEMID IN (SELECT ITEM_ID FROM L_RESOURCES WHERE ITEM_AVAILABILE = 'YES');

SELECT * FROM STAFF 
WHERE LAMOUNT <= 6;

SELECT FNAME, LNAME, ID_NUM 
FROM STUDENT 
WHERE LAMOUNT >= 3;

SELECT COUNT(*) as "Total Items" 
FROM BOOKS 
UNION ALL 
SELECT COUNT(*) 
FROM DVDS 
UNION ALL 
SELECT COUNT(*) 
FROM VIDEOS;

SELECT I_CLASS as "Subject Class", COUNT(*) as "Total Items" 
FROM BOOKS 
GROUP BY I_CLASS 
UNION ALL 
SELECT I_CLASS, COUNT(*) 
FROM DVDS 
GROUP BY I_CLASS 
UNION ALL 
SELECT I_CLASS, COUNT(*) 
FROM VIDEOS 
GROUP BY I_CLASS;

8. Display the names of students who have borrowed an item and need to return it in 2 days or fewer. 


SELECT FNAME, LNAME 
FROM STUDENT 
WHERE LAMOUNT >= 1 AND LDURATION <= 2;

SELECT FNAME, LNAME 
FROM STUDENT 
WHERE LAMOUNT >= 1 AND LDURATION <= 2;

SELECT AVG(LDURATION) AS AVG_LOAN_DURATION, AVG(LAMOUNT) AS AVG_LOAN_AMOUNT 
FROM STUDENT;

CREATE TABLE FINES ( 
ID_NUM NUMBER(6) REFERENCES LMEMBER(IDNUM), 
ITEM_ID NUMBER(7) REFERENCES L_RESOURCES(ITEM_ID), 
FINE_AMOUNT NUMBER(1), 
PAYMENT_STATUS VARCHAR2(3) 
);

SELECT STUDENT.FNAME, STUDENT.LNAME, STUDENT.ID_NUM 
FROM STUDENT 
JOIN FINES ON FINES.ID_NUM = STUDENT.ID_NUM 
WHERE FINES.PAYMENT_STATUS = 'UNPAID';

SELECT STUDENT.FNAME, STUDENT.LNAME, STUDENT.ID_NUM 
FROM STUDENT 
JOIN FINES ON FINES.ID_NUM = STUDENT.ID_NUM 
WHERE FINES.PAYMENT_STATUS = 'UNPAID';

SELECT FNAME, LNAME, ID_NUM FROM STUDENT 
WHERE LDURATION > 14 
UNION ALL 
SELECT FNAME, LNAME, ID_NUM FROM STAFF 
WHERE LDURATION > 14;

SELECT * FROM STUDENT;

SELECT * FROM STUDENT;

SELECT * FROM BOOKS;

SELECT * FROM STUDENT;

SELECT * FROM DVDS;

INSERT INTO FINES VALUES( 
'100906','1005447', '03','UNPAID' 
);

INSERT INTO FINES VALUES( 
'100904','2003400', '01','UNPAID' 
);

INSERT INTO FINES VALUES( 
'100906','1005447', '3','UNPAID' 
);

INSERT INTO FINES VALUES( 
'100904','2003400', '1','UNPAID' 
);

DROP TABLE FINES;

CREATE TABLE FINES (  
ID_NUM NUMBER(6) REFERENCES LMEMBER(IDNUM),  
ITEM_ID NUMBER(7) REFERENCES L_RESOURCES(ITEM_ID),  
FINE_AMOUNT NUMBER(1),  
PAYMENT_STATUS VARCHAR2(6)  
);

INSERT INTO FINES VALUES( 
'100906','1005447', '3','UNPAID' 
);

INSERT INTO FINES VALUES( 
'100904','2003400', '1','UNPAID' 
);

SELECT STUDENT.FNAME, STUDENT.LNAME, STUDENT.ID_NUM 
FROM STUDENT 
JOIN FINES ON FINES.ID_NUM = STUDENT.ID_NUM 
WHERE FINES.PAYMENT_STATUS = 'UNPAID';

SELECT BOOKS.ITEM_NAME, S_SUBJECT.SUBJECT_CLASS 
FROM BOOKS 
INNER JOIN L_RESOURCES ON BOOKS.ITEMID = L_RESOURCES.ITEM_ID 
INNER JOIN S_SUBJECT ON BOOKS.I_CLASS = S_SUBJECT.SUBJECT_CLASS 
WHERE L_RESOURCES.ITEM_AVAILABILE = 'YES';

SELECT * FROM STUDENT 
INNER JOIN LMEMBER 
ON STUDENT.ID_NUM = LMEMBER.IDNUM 
WHERE LMEMBER.IS_RESTRICTED = 'YES';

SELECT I_CLASS, FLOOR_NUM 
FROM VIDEOS 
WHERE ITEMID IN (SELECT ITEM_ID FROM L_RESOURCES WHERE ITEM_AVAILABILE = 'YES');

SELECT * FROM STAFF 
WHERE LAMOUNT <= 6;

SELECT FNAME, LNAME, ID_NUM 
FROM STUDENT 
WHERE LAMOUNT >= 3;

SELECT COUNT(*) as "Total Items" 
FROM BOOKS 
UNION ALL 
SELECT COUNT(*) 
FROM DVDS 
UNION ALL 
SELECT COUNT(*) 
FROM VIDEOS;

SELECT I_CLASS as "Subject Class", COUNT(*) as "Total Items" 
FROM BOOKS 
GROUP BY I_CLASS 
UNION ALL 
SELECT I_CLASS, COUNT(*) 
FROM DVDS 
GROUP BY I_CLASS 
UNION ALL 
SELECT I_CLASS, COUNT(*) 
FROM VIDEOS 
GROUP BY I_CLASS;

SELECT FNAME, LNAME 
FROM STUDENT 
WHERE LAMOUNT >= 1 AND LDURATION <= 2;

SELECT AVG(LDURATION) AS AVG_LOAN_DURATION, AVG(LAMOUNT) AS AVG_LOAN_AMOUNT 
FROM STUDENT;

SELECT STUDENT.FNAME, STUDENT.LNAME, STUDENT.ID_NUM 
FROM STUDENT 
JOIN FINES ON FINES.ID_NUM = STUDENT.ID_NUM 
WHERE FINES.PAYMENT_STATUS = 'UNPAID';

SELECT FNAME, LNAME, ID_NUM FROM STUDENT 
WHERE LDURATION > 14 
UNION ALL 
SELECT FNAME, LNAME, ID_NUM FROM STAFF 
WHERE LDURATION > 14;

